// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AMContext))]
    [Migration("20230516220550_hi")]
    partial class hi
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationCore.Domain.Artiste", b =>
                {
                    b.Property<int>("artisteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("artisteId"));

                    b.Property<string>("contact")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("datedenaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("nationalite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("nom")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("prenom")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("artisteId");

                    b.ToTable("artistes");
                });

            modelBuilder.Entity("ApplicationCore.Domain.chanson", b =>
                {
                    b.Property<int>("chansonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("chansonId"));

                    b.Property<int>("artisteFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("datesortie")
                        .HasColumnType("datetime2");

                    b.Property<int>("duree")
                        .HasColumnType("int");

                    b.Property<int>("stylemusicale")
                        .HasColumnType("int");

                    b.Property<string>("titre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("vueyt")
                        .HasColumnType("int");

                    b.HasKey("chansonId");

                    b.HasIndex("artisteFK");

                    b.ToTable("chansons");
                });

            modelBuilder.Entity("ApplicationCore.Domain.concerte", b =>
                {
                    b.Property<int>("festivalFK")
                        .HasColumnType("int");

                    b.Property<int>("artisteFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateconcert")
                        .HasColumnType("datetime2");

                    b.Property<double>("cachet")
                        .HasColumnType("float");

                    b.Property<int>("duree")
                        .HasColumnType("int");

                    b.HasKey("festivalFK", "artisteFK", "dateconcert");

                    b.HasIndex("artisteFK");

                    b.ToTable("concertes");
                });

            modelBuilder.Entity("ApplicationCore.Domain.festival", b =>
                {
                    b.Property<int>("festivalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("festivalId"));

                    b.Property<int>("capacite")
                        .HasColumnType("int");

                    b.Property<string>("labelle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ville")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("festivalId");

                    b.ToTable("festivals");
                });

            modelBuilder.Entity("ApplicationCore.Domain.chanson", b =>
                {
                    b.HasOne("ApplicationCore.Domain.Artiste", "Artiste")
                        .WithMany("Chansons")
                        .HasForeignKey("artisteFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artiste");
                });

            modelBuilder.Entity("ApplicationCore.Domain.concerte", b =>
                {
                    b.HasOne("ApplicationCore.Domain.Artiste", "Artiste")
                        .WithMany("Concerts")
                        .HasForeignKey("artisteFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Domain.festival", "Festival")
                        .WithMany("Concerts")
                        .HasForeignKey("festivalFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artiste");

                    b.Navigation("Festival");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Artiste", b =>
                {
                    b.Navigation("Chansons");

                    b.Navigation("Concerts");
                });

            modelBuilder.Entity("ApplicationCore.Domain.festival", b =>
                {
                    b.Navigation("Concerts");
                });
#pragma warning restore 612, 618
        }
    }
}
